name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run unit tests
      run: cargo test --lib --verbose
      
    - name: Run all tests
      run: cargo test --verbose

    - name: Check documentation
      run: cargo doc --no-deps --document-private-items


  build:
    name: Build and Test
    needs: [test]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: tsh-linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: tsh-linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: tsh-windows-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: tsh-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: tsh-macos-arm64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build binaries
      run: cargo build --release --target ${{ matrix.target }}
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

    - name: Create artifact directory
      run: mkdir -p artifacts/${{ matrix.artifact_name }}

    - name: Copy binaries (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/tsh artifacts/${{ matrix.artifact_name }}/

    - name: Copy binaries (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/tsh.exe artifacts/${{ matrix.artifact_name }}/

    - name: Add README and LICENSE (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp README.md artifacts/${{ matrix.artifact_name }}/
        cp LICENSE artifacts/${{ matrix.artifact_name }}/ 2>/dev/null || echo "LICENSE file not found, skipping"

    - name: Add README and LICENSE (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cp README.md artifacts/${{ matrix.artifact_name }}/
        if (Test-Path "LICENSE") { cp LICENSE artifacts/${{ matrix.artifact_name }}/ } else { Write-Host "LICENSE file not found, skipping" }

    - name: Create tarball (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd artifacts
        tar -czf ${{ matrix.artifact_name }}.tar.gz ${{ matrix.artifact_name }}/

    - name: Create zip (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd artifacts
        7z a ${{ matrix.artifact_name }}.zip ${{ matrix.artifact_name }}/

    - name: Upload artifacts (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: artifacts/${{ matrix.artifact_name }}.tar.gz

    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: artifacts/${{ matrix.artifact_name }}.zip
