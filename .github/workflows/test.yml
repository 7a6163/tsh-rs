name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, nightly]
        exclude:
          # Exclude nightly on Windows to save CI time
          - os: windows-latest
            rust: nightly
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-git-
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-${{ matrix.rust }}-
    
    - name: Check formatting
      run: cargo fmt --all -- --check
      if: matrix.rust == 'stable'
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      if: matrix.rust == 'stable'
      continue-on-error: true
    
    - name: Build
      run: cargo build --verbose --all-features
    
    - name: Run unit tests
      run: cargo test --lib --verbose
    
    - name: Run doc tests
      run: cargo test --doc --verbose
      if: matrix.rust == 'stable'
    
    - name: Run integration tests
      run: cargo test --test '*' --verbose
      continue-on-error: true
    
    - name: Build release mode
      run: cargo build --release --verbose
      if: matrix.rust == 'stable'

  functional-test:
    name: Functional Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build release binary
      run: cargo build --release
    
    - name: Create test script
      run: |
        cat > test_functionality.sh << 'EOF'
        #!/bin/bash
        set -e
        
        BIN="./target/release/tsh"
        FAILED=0
        
        # Colors for output
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        NC='\033[0m' # No Color
        
        echo -e "${YELLOW}=== TSH Functional Tests ===${NC}"
        
        # Function to cleanup processes
        cleanup() {
            pkill -f "tsh server" 2>/dev/null || true
            sleep 1
        }
        
        # Function to run test
        run_test() {
            local test_name="$1"
            local test_cmd="$2"
            local expected="$3"
            
            echo -ne "Testing $test_name... "
            
            result=$(eval "$test_cmd" 2>&1)
            
            if echo "$result" | grep -q "$expected"; then
                echo -e "${GREEN}PASSED${NC}"
                return 0
            else
                echo -e "${RED}FAILED${NC}"
                echo "Expected: $expected"
                echo "Got: $result"
                FAILED=$((FAILED + 1))
                return 1
            fi
        }
        
        # Cleanup before starting
        cleanup
        
        # Test 1: Command execution
        echo -e "\n${YELLOW}1. Testing Command Execution${NC}"
        
        # Start server
        $BIN server --port 9001 --psk testkey123 > server1.log 2>&1 &
        SERVER_PID=$!
        sleep 2
        
        # Test command execution
        run_test "echo command" \
            "$BIN client 127.0.0.1:9001 --psk testkey123 'echo Hello World'" \
            "Hello World"
        
        run_test "pwd command" \
            "$BIN client 127.0.0.1:9001 --psk testkey123 'pwd'" \
            "/"
        
        # Kill server
        kill $SERVER_PID 2>/dev/null || true
        sleep 1
        
        # Test 2: File operations
        echo -e "\n${YELLOW}2. Testing File Operations${NC}"
        
        # Create test files
        echo "Test content for download" > /tmp/test_download.txt
        mkdir -p /tmp/tsh_test
        
        # Start server
        $BIN server --port 9002 --psk filekey > server2.log 2>&1 &
        SERVER_PID=$!
        sleep 2
        
        # Test file download
        run_test "file download" \
            "$BIN client 127.0.0.1:9002 --psk filekey get:/tmp/test_download.txt:/tmp/tsh_test && cat /tmp/tsh_test/test_download.txt" \
            "Test content for download"
        
        # Test file upload
        echo "Test content for upload" > /tmp/test_upload.txt
        run_test "file upload" \
            "$BIN client 127.0.0.1:9002 --psk filekey put:/tmp/test_upload.txt:/tmp/tsh_test && cat /tmp/tsh_test/test_upload.txt" \
            "Test content for upload"
        
        # Kill server
        kill $SERVER_PID 2>/dev/null || true
        
        # Test 3: Wrong PSK (should fail)
        echo -e "\n${YELLOW}3. Testing Authentication${NC}"
        
        # Start server
        $BIN server --port 9003 --psk correctkey > server3.log 2>&1 &
        SERVER_PID=$!
        sleep 2
        
        # Test wrong PSK
        if $BIN client 127.0.0.1:9003 --psk wrongkey 'echo test' 2>&1 | grep -q "Error"; then
            echo -e "Wrong PSK rejection... ${GREEN}PASSED${NC}"
        else
            echo -e "Wrong PSK rejection... ${RED}FAILED${NC}"
            FAILED=$((FAILED + 1))
        fi
        
        # Kill server
        kill $SERVER_PID 2>/dev/null || true
        
        # Cleanup
        cleanup
        rm -rf /tmp/tsh_test /tmp/test_*.txt
        
        # Summary
        echo -e "\n${YELLOW}=== Test Summary ===${NC}"
        if [ $FAILED -eq 0 ]; then
            echo -e "${GREEN}All tests passed!${NC}"
            exit 0
        else
            echo -e "${RED}$FAILED tests failed!${NC}"
            exit 1
        fi
        EOF
        
        chmod +x test_functionality.sh
    
    - name: Run functional tests
      run: ./test_functionality.sh
      timeout-minutes: 5
    
    - name: Upload test logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-logs
        path: |
          server*.log
          test_functionality.sh

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: lcov.info
        fail_ci_if_error: false
      continue-on-error: true