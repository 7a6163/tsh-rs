name: Detailed Tests

on:
  push:
    branches: [ main ]
    paths:
      - '**.rs'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/test-detailed.yml'
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run unit tests with output
      run: |
        echo "=== Running Unit Tests ==="
        cargo test --lib -- --test-threads=1 --nocapture
    
    - name: Run specific test suites
      run: |
        echo "=== Noise Protocol Tests ==="
        cargo test --lib tests::noise_tests -- --nocapture
        
        echo "=== Protocol Tests ==="
        cargo test --lib tests::protocol_tests -- --nocapture
        
        echo "=== Integration Tests ==="
        cargo test --lib tests::integration_tests -- --nocapture

  cross-platform-tests:
    name: Cross-Platform Tests
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Run tests
      run: cargo test --lib --verbose
    
    - name: Test release build
      run: |
        cargo build --release
        cargo test --lib --release

  functional-tests:
    name: Functional Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build release binary
      run: cargo build --release
    
    - name: Test basic functionality
      run: |
        BIN="./target/release/tsh"
        
        # Test help command
        echo "=== Testing help command ==="
        $BIN --help
        $BIN server --help
        $BIN client --help
        
        # Test version
        echo "=== Testing version ==="
        $BIN --version
    
    - name: Test command execution
      run: |
        BIN="./target/release/tsh"
        
        # Start server in background
        $BIN server --port 7777 --psk testkey &
        SERVER_PID=$!
        sleep 2
        
        # Test simple command
        echo "=== Testing command execution ==="
        $BIN client 127.0.0.1:7777 --psk testkey "echo 'Test successful'" || true
        
        # Kill server
        kill $SERVER_PID 2>/dev/null || true
      timeout-minutes: 2

  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, cross-platform-tests, functional-tests]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov
    
    - name: Generate test report
      run: |
        cargo llvm-cov test --lib --html
        cargo llvm-cov report
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: target/llvm-cov/html/
    
    - name: Test summary
      run: |
        echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Unit Tests" >> $GITHUB_STEP_SUMMARY
        echo "- Noise Protocol Tests ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Protocol Communication Tests ✅" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests ✅" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
        cargo llvm-cov report --summary-only >> $GITHUB_STEP_SUMMARY || echo "Coverage report not available" >> $GITHUB_STEP_SUMMARY